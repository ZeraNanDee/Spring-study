<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd">
    
      <bean name="stu2" class="com.ZeraNanDee.test2.HelloBean">
      <property name="name" value="张三"></property>
     <property name="course" value="数学"></property>
     <property name="score" value="95"></property>
    </bean>
    
    <!-- 使用命名空间p来注入属性值更加便捷，相比较property更方便 -->
    <bean name="hasp" class="com.ZeraNanDee.test2.HelloBean"
     p:name="李希"  p:course="语文" p:score="80"  >   
    </bean>
    
    <bean name="person" class="com.ZeraNanDee.test3.Person"
    p:name="李阳" p:number="CST14002"></bean>
    <!-- bean的继承,可以同类person内bean之间实现继承，同时也可以重写属性 -->
    <bean name="person2" class="com.ZeraNanDee.test3.Person"
    parent="person" p:number="#{'SSSff112'}"></bean>
    
    <!-- bean的ref引用，直接用person3的bean引用其他bean，做到解耦，将其他类特有属性方法付给person3-->
    <!-- #{}这个是SqEL表达式，可以动态运算和各种表达-->
     <bean name="person3" class="com.ZeraNanDee.test3.Person"
     p:name="林老师" p:number="#{'SSS1122'}" p:teacher-ref="teacher"></bean>
    
     <!-- bean的继承，也可以用student继承父类，同时也可以重写属性,Student那边要写extends Person -->
    <bean name="student" class="com.ZeraNanDee.test3.Student"
   p:name="李刚" p:course="英语" p:score="40" parent="person"></bean>
     <bean name="teacher" class="com.ZeraNanDee.test3.Teacher"
    p:gongzi="8000"></bean>
    
    
    </beans>